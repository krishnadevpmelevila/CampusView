<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=0.3">
    <title>Dynamic Assessment Input</title>
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --light-bg: #f8f9fa;
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --border-radius: 10px;
            --text-dark: #333;
            --text-muted: #6c757d;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            color: var(--text-dark);
            min-height: 100vh;
        }

        .main-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar styling */
        .sidebar {
            width: 280px;
            background-color: white;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
            padding: 20px;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
        }

        .logo {
            display: flex;
            align-items: center;
            margin-bottom: 30px;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .logo span:first-child {
            font-weight: bold;
            font-size: 1.4rem;
            color: #333;
        }

        .logo span:last-child {
            font-weight: bold;
            font-size: 1.4rem;
            color: var(--primary-color);
            margin-left: 5px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            margin-bottom: 8px;
            border-radius: var(--border-radius);
            color: var(--text-dark);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .nav-item:hover {
            background-color: rgba(67, 97, 238, 0.08);
            color: var(--primary-color);
        }

        .nav-item.active {
            background-color: var(--primary-color);
            color: white;
        }

        .nav-item svg {
            margin-right: 10px;
        }

        .nav-item-text {
            font-size: 0.95rem;
            font-weight: 500;
        }

        .logout-btn {
            margin-top: auto;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }

        /* Main content area */
        .content-area {
            flex-grow: 1;
            margin-left: 280px;
            padding: 20px 30px;
        }

        .top-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .page-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: #333;
        }

        .user-section {
            display: flex;
            align-items: center;
        }

        .user-section img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .user-info {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: 600;
            font-size: 0.95rem;
        }

        .user-role {
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        /* Card styling */
        .card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 25px;
            border: none;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 20px;
            font-weight: 600;
            color: #333;
            font-size: 1.1rem;
        }

        .card-body {
            padding: 20px;
        }

        /* Form styling */
        .form-label {
            font-weight: 500;
            color: #555;
            margin-bottom: 6px;
        }

        .form-select,
        .form-control {
            border: 1px solid #ddd;
            padding: 12px 15px;
            border-radius: 8px;
            font-size: 0.95rem;
            box-shadow: none;
            transition: border-color 0.3s;
        }

        .form-select:focus,
        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        /* Tables */
        .table-container {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 25px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
        }

        th,
        td {
            border: 1px solid #eee;
            padding: 12px;
            text-align: center;
            white-space: nowrap;
        }

        th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #555;
            white-space: normal;
            word-wrap: break-word;
            text-align: center;
            min-width: 100px;
            max-width: 150px;
        }

        td input {
            width: 100%;
            padding: 8px 12px;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 6px;
        }

        td input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.1);
        }

        td input[readonly] {
            background-color: #f9f9f9;
            border: 1px solid #eee;
        }

        /* Buttons */
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 10px 16px;
            font-weight: 500;
            border-radius: 8px;
            transition: all 0.3s;
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

        .btn-light {
            background-color: white;
            border-color: #ddd;
            color: #555;
            padding: 8px 14px;
            font-weight: 500;
            border-radius: 8px;
        }

        .btn-light:hover {
            background-color: #f8f9fa;
        }

        .remove-student-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: background-color 0.3s;
        }

        .remove-student-btn:hover {
            background-color: #c82333;
        }

        .student-entry {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }

        /* Dark mode toggle */
        .dark-mode-toggle {
            background: none;
            border: none;
            cursor: pointer;
            color: #555;
            font-size: 1.2rem;
        }

        /* Responsive */
        @media (max-width: 992px) {
            .sidebar {
                width: 220px;
            }

            .content-area {
                margin-left: 220px;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 0;
                display: none;
            }

            .content-area {
                margin-left: 0;
            }

            .main-container {
                flex-direction: column;
            }

            .student-entry {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>

<body>
    <div class="main-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <span>CAMPUS</span>
                <span>VIEW</span>
            </div>

            <a href="/dashboard" class="nav-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="3" width="7" height="7"></rect>
                    <rect x="14" y="3" width="7" height="7"></rect>
                    <rect x="14" y="14" width="7" height="7"></rect>
                    <rect x="3" y="14" width="7" height="7"></rect>
                </svg>
                <span class="nav-item-text">Dashboard</span>
            </a>
            <script>
                console.log("Dropdown Data Received:", data); // Debugging output
            </script>
            {{#if user.admin}}
            <a href="/assessment-tools" class="nav-item ">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path
                        d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z">
                    </path>
                </svg>
                <span class="nav-item-text">Add Assessment Tools</span>
            </a>


            {{/if}}
            <a href="/student-data" class="nav-item active">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                    <circle cx="9" cy="7" r="4"></circle>
                    <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                    <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                </svg>
                <span class="nav-item-text">Add Student Data</span>
            </a>

            <a href="/attaintmentCalculation" class="nav-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="20" x2="18" y2="10"></line>
                    <line x1="12" y1="20" x2="12" y2="4"></line>
                    <line x1="6" y1="20" x2="6" y2="14"></line>
                </svg>
                <span class="nav-item-text">Attainment Calculation</span>
            </a>

            <div class="mt-auto">
                <a href="/logout" id="logoutButton" class="nav-item logout-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                        <polyline points="16 17 21 12 16 7"></polyline>
                        <line x1="21" y1="12" x2="9" y2="12"></line>
                    </svg>
                    <span class="nav-item-text">Logout</span>
                </a>
            </div>
        </div>

        <!-- Main Content Area -->

        <div class="content-area">
            <div class="top-header">
                <h1 class="page-title">Dynamic Student Assessment Entry</h1>

                <div class="d-flex align-items-center">


                    <div class="user-section">
                        <img src="/images/image.png" alt="User Profile">
                        <div class="user-info">
                            {{#if user.admin}}
                            <div class="user-name">Admin</div>
                            <div class="user-role">Administrator</div>
                            {{else}}
                            <div class="user-name">User</div>
                            <div class="user-role">Staff</div>
                            {{/if}}

                        </div>

                    </div>


                </div>
            </div>
            <div class="container">
                <form id="assessmentForm">
                    <!-- Selection Criteria Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            Selection Criteria
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="branchDropdown" class="form-label">Branch</label>
                                    <select id="branchDropdown" class="form-select" required>
                                        <option value="">Select Branch</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="assessmentYear" class="form-label">Assessment Year</label>
                                    <select id="assessmentYear" class="form-select" required>
                                        <option value="">Select Year</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="semesterDropdown" class="form-label">Semester</label>
                                    <select id="semesterDropdown" class="form-select" required>
                                        <option value="">Select Semester</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="subjectDropdown" class="form-label">Subject</label>
                                    <select id="subjectDropdown" class="form-select" required>
                                        <option value="">Select Subject</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="facultyDropdown" class="form-label">Faculty Name</label>
                                    <select id="facultyDropdown" class="form-select" required>
                                        <option value="">Select Faculty</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label for="courseCode" class="form-label">Course Code</label>
                                    <input type="text" id="courseCode" class="form-control" required readonly>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <label for="batch" class="form-label">Batch</label>
                                    <select id="batch" class="form-select" required>
                                        <option value="">Select Batch</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Student Entry Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            Student Details
                        </div>
                        <div class="card-body">
                            <div class="student-entry">
                                <div class="flex-grow-1 me-2">
                                    <label class="form-label">Roll Number</label>
                                    <input type="text" id="rollNumber" name="rollNumber[]" class="form-control">
                                </div>
                                <div class="flex-grow-1 me-2">
                                    <label class="form-label">Student Name</label>
                                    <input type="text" id="studentName" name="studentName[]" class="form-control">
                                </div>

                                <div class="mt-4">
                                    <button type="button" class="btn btn-primary" onclick="addStudent()">Add
                                        Student</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Assessment Tools Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            Assessment Tools & Questions
                        </div>
                        <div class="card-body">
                            <div id="assessmentToolsSection"></div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-4">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            async function fetchFilteredAssessmentData() {
                const branch = document.getElementById("branchDropdown").value;
                const semester = document.getElementById("semesterDropdown").value;
                const subject = document.getElementById("subjectDropdown").value;
                const courseCode = document.getElementById("courseCode").value;
                const batch = document.getElementById("batch").value;
                const faculty = document.getElementById("facultyDropdown").value;
                const assessmentYear = document.getElementById("assessmentYear").value;

                // Construct URL with Query Parameters
                const queryParams = new URLSearchParams({
                    branch,
                    semester,
                    subject,
                    courseCode,
                    batch,
                    faculty,
                    assessmentYear
                }).toString();

                try {
                    const response = await fetch(`/get-filtered-assessment-data?${queryParams}`);
                    const data = await response.json();

                    console.log("Filtered Assessment Data:", data);
                    generateAssessmentTools(data.tools);
                } catch (error) {
                    console.error("Error fetching assessment data:", error);
                }
            }

            // Call this function when any dropdown changes
            document.getElementById("branchDropdown").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("semesterDropdown").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("subjectDropdown").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("courseCode").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("batch").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("facultyDropdown").addEventListener("change", fetchFilteredAssessmentData);
            document.getElementById("assessmentYear").addEventListener("change", fetchFilteredAssessmentData);

            document.addEventListener("DOMContentLoaded", async () => {
                try {
                    // Fetch dropdown data from API
                    const response = await fetch("/get-dropdown-data");
                    const data = await response.json();

                    console.log("Dropdown Data Received:", data); // Debugging output

                    // Get all dropdown elements
                    const branchDropdown = document.getElementById("branchDropdown");
                    const semesterDropdown = document.getElementById("semesterDropdown");
                    const subjectDropdown = document.getElementById("subjectDropdown");
                    const courseCodeInput = document.getElementById("courseCode");
                    const batchDropdown = document.getElementById("batch");
                    const facultyDropdown = document.getElementById("facultyDropdown");
                    const assessmentYearDropdown = document.getElementById("assessmentYear");

                    // Populate Branch Dropdown
                    populateDropdown(branchDropdown, data.branches);

                    // Store branch-wise structured data
                    const branchData = data.branchData.reduce((acc, item) => {
                        acc[item._id] = item;
                        return acc;
                    }, {});

                    // Event Listener for Branch Selection (Filters everything step-by-step)
                    branchDropdown.addEventListener("change", function () {
                        const selectedBranch = this.value;

                        resetDropdown(semesterDropdown);
                        resetDropdown(subjectDropdown);
                        resetDropdown(facultyDropdown);
                        resetDropdown(batchDropdown);
                        resetDropdown(assessmentYearDropdown);

                        if (branchData[selectedBranch]) {
                            // Populate Semesters
                            populateDropdown(semesterDropdown, branchData[selectedBranch].semesters);
                            // Populate Batches
                            populateDropdown(batchDropdown, branchData[selectedBranch].batches);
                            // Populate Assessment Years
                            populateDropdown(assessmentYearDropdown, branchData[selectedBranch].assessmentYears);
                        }
                    });

                    // Event Listener for Semester Selection
                    semesterDropdown.addEventListener("change", function () {
                        const selectedBranch = branchDropdown.value;

                        resetDropdown(subjectDropdown);
                        resetDropdown(facultyDropdown);


                        if (branchData[selectedBranch]) {
                            populateDropdown(subjectDropdown, branchData[selectedBranch].subjects);
                        }
                    });

                    // Event Listener for Subject Selection
                    subjectDropdown.addEventListener("change", function () {
                        const selectedBranch = branchDropdown.value;
                        resetDropdown(facultyDropdown);


                        if (branchData[selectedBranch]) {
                            populateDropdown(facultyDropdown, branchData[selectedBranch].faculty);
                            populateTextInput(courseCodeInput, branchData[selectedBranch].courseCodes);
                        }
                    });

                    // Helper Functions
                    function populateDropdown(dropdown, items) {
                        if (!items || !Array.isArray(items) || items.length === 0) return;
                        dropdown.innerHTML = '<option value="">Select</option>';
                        items.forEach(item => {
                            const option = document.createElement("option");
                            option.value = item;
                            option.textContent = item;
                            dropdown.appendChild(option);
                        });
                    }

                    function populateTextInput(input, values) {
                        if (values && Array.isArray(values) && values.length === 1) {
                            input.value = values[0];
                        }
                    }

                    function resetDropdown(dropdown) {
                        dropdown.innerHTML = '<option value="">Select</option>';
                    }

                } catch (error) {
                    console.error("Error loading dropdown data:", error);
                }
            });

            // Function to Remove Student Entry
            function removeStudent(button) {
                button.parentElement.remove();
            }

            function generateAssessmentTools(tools) {
                const assessmentToolsSection = document.getElementById("assessmentToolsSection");
                assessmentToolsSection.innerHTML = ""; // Clear previous content

                tools.forEach(tool => {
                    // Create a container for each tool
                    const toolContainer = document.createElement("div");
                    toolContainer.classList.add("table-container");

                    // Add tool header with nice formatting
                    const toolHeader = document.createElement("div");
                    toolHeader.classList.add("p-3", "bg-light", "border-bottom", "d-flex", "align-items-center");
                    toolHeader.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
                    <h5 class="mb-0">${tool.name}</h5>
                `;
                    toolContainer.appendChild(toolHeader);

                    // Create the table
                    const table = document.createElement("table");
                    table.classList.add("table", "table-hover");
                    table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Roll Number</th>
                            ${tool.questions
                            .map(q => `<th>Q${q.id}<br>CO: ${q.co}<br>(${q.blooms}, Max: ${q.maxMarks})</th>`)
                            .join("")}
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="${tool.name}-questions">
                        <!-- Students will be added dynamically here -->
                    </tbody>
                `;

                    toolContainer.appendChild(table);
                    assessmentToolsSection.appendChild(toolContainer);
                });
            }

            let studentCount = 0;

            async function addStudent() {
                const studentName = document.getElementById('studentName').value.trim();
                const rollNumber = document.getElementById('rollNumber').value.trim();

                if (!studentName || !rollNumber) {
                    alert("Please enter both Student Name and Roll Number.");
                    return;
                }

                // Get dynamic assessment data
                const branch = document.getElementById("branchDropdown").value;
                const semester = document.getElementById("semesterDropdown").value;
                const subject = document.getElementById("subjectDropdown").value;
                const courseCode = document.getElementById("courseCode").value;
                const batch = document.getElementById("batch").value;
                const faculty = document.getElementById("facultyDropdown").value;
                const assessmentYear = document.getElementById("assessmentYear").value;

                // Ensure all required fields are filled before fetching
                if (!branch || !semester || !assessmentYear) {
                    alert("Please select Branch, Semester, and Assessment Year before adding students.");
                    return;
                }

                const queryParams = new URLSearchParams({
                    branch,
                    semester,
                    subject,
                    courseCode,
                    batch,
                    faculty,
                    assessmentYear
                }).toString();

                try {
                    // Fetch updated assessment data
                    const response = await fetch(`http://localhost:5555/get-filtered-assessment-data?${queryParams}`);
                    if (!response.ok) {
                        throw new Error("Failed to fetch data");
                    }
                    const data = await response.json();

                    console.log("Updated Assessment Data:", data);

                    if (!data.tools || data.tools.length === 0) {
                        alert("No assessment tools found for the selected filters.");
                        return;
                    }

                    // Increase student count
                    studentCount++;

                    // Loop through each tool and add student row
                    data.tools.forEach(tool => {
                        const tableBody = document.getElementById(`${tool.name}-questions`);
                        if (!tableBody) {
                            console.warn(`Table body not found for tool: ${tool.name}`);
                            return;
                        }

                        const studentRow = document.createElement('tr');
                        const studentRowId = `studentRow${studentCount}-${tool.name}`; // Unique row ID

                        studentRow.id = studentRowId;
                        studentRow.innerHTML = `
                        <td><input type="text" value="${studentName}" readonly class="form-control form-control-sm"></td>
                        <td><input type="text" value="${rollNumber}" readonly class="form-control form-control-sm"></td>
                        ${tool.questions.map(q => `
                            <td>
                                <input type="number" name="marksObtained_${studentCount}_${tool.name}_${q.id}" max="${q.maxMarks}" required class="form-control form-control-sm" />
                            </td>`).join('')}
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" onclick="removeStudent('${studentRowId}')">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                            </button>
                        </td>
                    `;

                        tableBody.appendChild(studentRow);
                    });

                    // Clear input fields
                    document.getElementById('studentName').value = '';
                    document.getElementById('rollNumber').value = '';

                } catch (error) {
                    console.error("Error fetching assessment data:", error);
                    alert("Error loading assessment data. Please try again.");
                }
            }

            // Function to remove a student row dynamically
            function removeStudent(rowId) {
                const row = document.getElementById(rowId);
                if (row) {
                    row.remove();
                }
            }

            document.getElementById('assessmentForm').addEventListener('submit', async (event) => {
                event.preventDefault();

                const finalData = {
                    branch: document.getElementById('branchDropdown').value || '',
                    subject: document.getElementById('subjectDropdown').value || '',
                    semester: document.getElementById('semesterDropdown').value || '',
                    courseCode: document.getElementById('courseCode').value || '',
                    batch: document.getElementById('batch').value || '',
                    students: {}
                };

                const branch = document.getElementById("branchDropdown").value;
                const semester = document.getElementById("semesterDropdown").value;
                const subject = document.getElementById("subjectDropdown").value;
                const courseCode = document.getElementById("courseCode").value;
                const batch = document.getElementById("batch").value;
                const faculty = document.getElementById("facultyDropdown").value;
                const assessmentYear = document.getElementById("assessmentYear").value;

                const queryParams = new URLSearchParams({
                    branch,
                    semester,
                    subject,
                    courseCode,
                    batch,
                    faculty,
                    assessmentYear
                }).toString();

                console.log('Query:', queryParams);

                try {
                    const response = await fetch(`http://localhost:5555/get-filtered-assessment-data?${queryParams}`);

                    if (!response.ok) {
                        throw new Error("Failed to fetch data");
                    }

                    const data = await response.json();
                    console.log("Updated Assessment Data:", data);

                    const studentRows = document.querySelectorAll('#assessmentToolsSection tr');

                    studentRows.forEach(row => {
                        const rowId = row.id;

                        if (!rowId.includes('-')) {
                            console.warn(`Skipping row with invalid ID: ${rowId}`);
                            return;
                        }

                        const [studentRowPrefix, toolName] = rowId.split('-');
                        const studentId = studentRowPrefix.split('studentRow')[1];

                        console.log('PRE:', finalData.students);

                        const studentName = row.querySelector('td:nth-child(1) input').value;
                        const rollNumber = row.querySelector('td:nth-child(2) input').value;

                        console.log('Student:', studentName, rollNumber, studentId);

                        if (!finalData.students[studentId]) {
                            finalData.students[studentId] = {
                                name: studentName,
                                roll: rollNumber,
                                tools: {}
                            };
                        }

                        if (!finalData.students[studentId].tools[toolName]) {
                            finalData.students[studentId].tools[toolName] = { questions: [] };
                        }

                        const tool = data.tools.find(t => t.name === toolName);
                        if (!tool) {
                            console.warn(`Tool "${toolName}" not found in data.tools`);
                            return;
                        }

                        console.log('Tool:', tool);

                        tool.questions.forEach((question, index) => {
                            const marksInput = row.querySelector(`td:nth-child(${index + 3}) input`);
                            const marksObtained = marksInput ? marksInput.value : '0';

                            finalData.students[studentId].tools[toolName].questions.push({
                                questionId: question.id,
                                co: question.co,
                                blooms: question.blooms,
                                maxMarks: question.maxMarks,
                                marksObtained
                            });
                        });
                    });

                    console.log('Final Data:', finalData);

                    const submitResponse = await fetch('/step2', {
                        method: 'POST',
                        body: JSON.stringify(finalData),
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const submitData = await submitResponse.json();
                    alert('Data submitted successfully!');
                    console.log('Submit Response:', submitData);

                    generateAssessmentTools();
                } catch (error) {
                    console.error('Error:', error);
                }
            });


        </script>


</body>

</html>