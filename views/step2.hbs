<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Assessment Input</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f9f9f9;
            color: #333;
        }

        h2,
        h3 {
            color: #0056b3;
        }

        form {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;
            margin: 10px 0;
            font-weight: bold;
        }

        input,
        select,
        button {
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        /* Ensure table takes full width without breaking */
        .table-container {
            width: 100%;
            overflow-x: auto;
            /* Scroll if too wide */
            margin-bottom: 20px;
        }

        /* Style the tables properly */
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: auto;
            /* Allow columns to adjust */
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
            white-space: nowrap;
            /* Prevent breaking inside cells */
        }

        /* Ensure headers align properly */
        th {
            white-space: normal;
            /* Allow wrapping */
            word-wrap: break-word;
            text-align: center;
            padding: 10px;
            min-width: 100px;
            /* Prevent excessive compression */
            max-width: 150px;
            /* Limit width to avoid too-wide columns */
        }

        /* Fix input fields inside tables */
        td input {
            width: 100%;
            padding: 5px;
            box-sizing: border-box;
            /* Ensure proper width calculation */
        }

        /* Ensure each student row is evenly spaced */
        tr {
            height: 50px;
        }

        /* Remove the border from empty inputs */
        td input[readonly] {
            background: #f9f9f9;
            border: none;
        }

        /* Responsive fix for smaller screens */
        @media (max-width: 768px) {
            th {
                font-size: 12px;
                /* Reduce font size on smaller screens */
                min-width: 80px;
                /* Adjust width for mobile */
            }
        }


        button {
            background-color: #0056b3;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }

        button:hover {
            background-color: #004494;
        }

        .table-container {
            margin-bottom: 30px;
        }

        .student-info {
            font-weight: bold;
            color: #333;
        }
    </style>
</head>

<body>
    <header class="d-flex justify-content-end align-items-center bg-primary p-3">
        <div class="md-6">
            <a href="/home" id="homeButton" class="btn btn-light fw-bold shadow">
                Home
            </a>
        </div>
        <div class="md-6">
            <button id="logoutButton" class="btn btn-light fw-bold shadow">
                Logout
            </button>
        </div>

    </header>

    <h2>Dynamic Student Assessment Entry</h2>

    <form id="assessmentForm">
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="branchDropdown" class="form-label">Branch</label>
                <select id="branchDropdown" class="form-select" required>
                    <option value="">Select Branch</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="assessmentYear" class="form-label">Assessment Year</label>
                <select id="assessmentYear" class="form-select" required>
                    <option value="">Select Year</option>
                </select>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="semesterDropdown" class="form-label">Semester</label>
                <select id="semesterDropdown" class="form-select" required>
                    <option value="">Select Semester</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="subjectDropdown" class="form-label">Subject</label>
                <select id="subjectDropdown" class="form-select" required>
                    <option value="">Select Subject</option>
                </select>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="facultyDropdown" class="form-label">Faculty Name</label>
                <select id="facultyDropdown" class="form-select" required>
                    <option value="">Select Faculty</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="courseCode" class="form-label">Course Code</label>
                <input type="text" id="courseCode" class="form-control" required readonly>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="batch" class="form-label">Batch</label>
                <select id="batch" class="form-select" required>
                    <option value="">Select Batch</option>
                </select>
            </div>
        </div>
        <h3>Student Details</h3>
        <div id="studentList">
            <div class="student-entry">
                <label>Student Name: <input type="text" id="studentName" name="studentName[]" required></label>
                <label>Roll Number: <input type="text" id="rollNumber" name="rollNumber[]" required></label>
                <button type="button" class="remove-student-btn" onclick="removeStudent(this)">Remove</button>
            </div>
        </div>
        <button type="button" onclick="addStudent()">Add Student</button>


        <h3>Assessment Tools & Questions</h3>
        <div id="assessmentToolsSection"></div>
        

        <br><br>
        <button type="submit">Submit</button>
    </form>

    <script>


        async function fetchFilteredAssessmentData() {
            const branch = document.getElementById("branchDropdown").value;
            const semester = document.getElementById("semesterDropdown").value;
            const subject = document.getElementById("subjectDropdown").value;
            const courseCode = document.getElementById("courseCode").value;
            const batch = document.getElementById("batch").value;
            const faculty = document.getElementById("facultyDropdown").value;
            const assessmentYear = document.getElementById("assessmentYear").value;

            // Construct URL with Query Parameters
            const queryParams = new URLSearchParams({
                branch,
                semester,
                subject,
                courseCode,
                batch,
                faculty,
                assessmentYear
            }).toString();

            try {
                const response = await fetch(`/get-filtered-assessment-data?${queryParams}`);
                const data = await response.json();

                console.log("Filtered Assessment Data:", data);
                generateAssessmentTools(data.tools);
            } catch (error) {
                console.error("Error fetching assessment data:", error);
            }
        }

        // Call this function when any dropdown changes
        document.getElementById("branchDropdown").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("semesterDropdown").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("subjectDropdown").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("courseCode").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("batch").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("facultyDropdown").addEventListener("change", fetchFilteredAssessmentData);
        document.getElementById("assessmentYear").addEventListener("change", fetchFilteredAssessmentData);

        document.addEventListener("DOMContentLoaded", async () => {
            try {
                // Fetch dropdown data from API
                const response = await fetch("/get-dropdown-data");
                const data = await response.json();

                console.log("Dropdown Data Received:", data); // Debugging output

                // Get all dropdown elements
                const branchDropdown = document.getElementById("branchDropdown");
                const semesterDropdown = document.getElementById("semesterDropdown");
                const subjectDropdown = document.getElementById("subjectDropdown");
                const courseCodeInput = document.getElementById("courseCode");
                const batchDropdown = document.getElementById("batch");
                const facultyDropdown = document.getElementById("facultyDropdown");
                const assessmentYearDropdown = document.getElementById("assessmentYear");

                // Populate Branch Dropdown
                populateDropdown(branchDropdown, data.branches);

                // Store branch-wise structured data
                const branchData = data.branchData.reduce((acc, item) => {
                    acc[item._id] = item;
                    return acc;
                }, {});

                // Event Listener for Branch Selection (Filters everything step-by-step)
                branchDropdown.addEventListener("change", function () {
                    const selectedBranch = this.value;

                    resetDropdown(semesterDropdown);
                    resetDropdown(subjectDropdown);
                    resetDropdown(facultyDropdown);
                    resetDropdown(batchDropdown);
                    resetDropdown(assessmentYearDropdown);

                    if (branchData[selectedBranch]) {
                        // Populate Semesters
                        populateDropdown(semesterDropdown, branchData[selectedBranch].semesters);
                        // Populate Batches
                        populateDropdown(batchDropdown, branchData[selectedBranch].batches);
                        // Populate Assessment Years
                        populateDropdown(assessmentYearDropdown, branchData[selectedBranch].assessmentYears);
                    }
                });

                // Event Listener for Semester Selection
                semesterDropdown.addEventListener("change", function () {
                    const selectedBranch = branchDropdown.value;

                    resetDropdown(subjectDropdown);
                    resetDropdown(facultyDropdown);


                    if (branchData[selectedBranch]) {
                        populateDropdown(subjectDropdown, branchData[selectedBranch].subjects);
                    }
                });

                // Event Listener for Subject Selection
                subjectDropdown.addEventListener("change", function () {
                    const selectedBranch = branchDropdown.value;
                    resetDropdown(facultyDropdown);


                    if (branchData[selectedBranch]) {
                        populateDropdown(facultyDropdown, branchData[selectedBranch].faculty);
                        populateTextInput(courseCodeInput, branchData[selectedBranch].courseCodes);
                    }
                });

                // Event Listener for Course Code Selection


                // Helper Functions
                function populateDropdown(dropdown, items) {
                    if (!items || !Array.isArray(items) || items.length === 0) return;
                    dropdown.innerHTML = '<option value="">Select</option>';
                    items.forEach(item => {
                        const option = document.createElement("option");
                        option.value = item;
                        option.textContent = item;
                        dropdown.appendChild(option);
                    });
                }

                function populateTextInput(input, values) {
                    if (values && Array.isArray(values) && values.length === 1) {
                        input.value = values[0];
                    }
                }

                function resetDropdown(dropdown) {
                    dropdown.innerHTML = '<option value="">Select</option>';
                }

                function resetInput(input) {
                    input.value = "";
                }

            } catch (error) {
                console.error("Error loading dropdown data:", error);
            }
        });

        // Add Students Dynamically
        // Function to Add Students Dynamically


        // Function to Remove Student Entry
        function removeStudent(button) {
            button.parentElement.remove();
        }

        // Add Assessment Tool
       

        // Remove Assessment Tool
        function removeAssessmentTool(button) {
            button.parentElement.remove();
        }

        // Add Question to Tool
        function addQuestion(button) {
            const container = button.parentElement.querySelector(".questions-container");
            const div = document.createElement("div");
            div.classList.add("question");
            div.innerHTML = `
        <label>Question No: <input type="number" name="questions[]" required></label>
        <label>CO Number: <input type="text" name="coNumber[]" required></label>
        <label>Bloom's Taxonomy: <input type="text" name="bloomsTaxonomy[]" required></label>
        <label>Max Marks: <input type="number" name="maxMarks[]" required></label>
        <button type="button" onclick="removeQuestion(this)">Remove Question</button>
    `;
            container.appendChild(div);
        }

        // Remove Question
        function removeQuestion(button) {
            button.parentElement.remove();
        }




        let studentCount = 0;

        function generateAssessmentTools(tools) {
            const assessmentToolsSection = document.getElementById("assessmentToolsSection");
            assessmentToolsSection.innerHTML = ""; // Clear previous content

            tools.forEach(tool => {
                // Create a container for each tool
                const toolContainer = document.createElement("div");
                toolContainer.classList.add("table-container");
                toolContainer.innerHTML = `<h3>${tool.name}</h3>`;

                // Create the table
                const table = document.createElement("table");
                table.innerHTML = `
            <thead>
                <tr>
                    <th>Student Name</th>
                    <th>Roll Number</th>
                    ${tool.questions
                        .map(q => `<th>Q${q.id}<br>CO: ${q.co}<br>(${q.blooms}, Max: ${q.maxMarks})</th>`)
                        .join("")}
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="${tool.name}-questions">
                <!-- Students will be added dynamically here -->
            </tbody>
        `;

                toolContainer.appendChild(table);
                assessmentToolsSection.appendChild(toolContainer);
            });
        }



        async function addStudent() {
            const studentName = document.getElementById('studentName').value.trim();
            const rollNumber = document.getElementById('rollNumber').value.trim();

            if (!studentName || !rollNumber) {
                alert("Please enter both Student Name and Roll Number.");
                return;
            }

            // Get dynamic assessment data
            const branch = document.getElementById("branchDropdown").value;
            const semester = document.getElementById("semesterDropdown").value;
            const subject = document.getElementById("subjectDropdown").value;
            const courseCode = document.getElementById("courseCode").value;
            const batch = document.getElementById("batch").value;
            const faculty = document.getElementById("facultyDropdown").value;
            const assessmentYear = document.getElementById("assessmentYear").value;

            // Ensure all required fields are filled before fetching
            if (!branch || !semester || !assessmentYear) {
                alert("Please select Branch, Semester, and Assessment Year before adding students.");
                return;
            }

            const queryParams = new URLSearchParams({
                branch,
                semester,
                subject,
                courseCode,
                batch,
                faculty,
                assessmentYear
            }).toString();

            try {
                // Fetch updated assessment data
                const response = await fetch(`http://localhost:3000/get-filtered-assessment-data?${queryParams}`);
                if (!response.ok) {
                    throw new Error("Failed to fetch data");
                }
                const data = await response.json();

                console.log("Updated Assessment Data:", data);

                if (!data.tools || data.tools.length === 0) {
                    alert("No assessment tools found for the selected filters.");
                    return;
                }

                // Increase student count
                studentCount++;

                // Loop through each tool and add student row
                data.tools.forEach(tool => {
                    const tableBody = document.getElementById(`${tool.name}-questions`);
                    if (!tableBody) {
                        console.warn(`Table body not found for tool: ${tool.name}`);
                        return;
                    }

                    const studentRow = document.createElement('tr');
                    const studentRowId = `studentRow${studentCount}-${tool.name}`; // Unique row ID

                    studentRow.id = studentRowId;
                    studentRow.innerHTML = `
                <td><input type="text" value="${studentName}" readonly></td>
                <td><input type="text" value="${rollNumber}" readonly></td>
                ${tool.questions.map(q => `
                    <td>
                        <input type="number" name="marksObtained_${studentCount}_${tool.name}_${q.id}" max="${q.maxMarks}" required />
                    </td>`).join('')}
                <td><button type="button" class="remove-student-btn" onclick="removeStudent('${studentRowId}')">Remove</button></td>
            `;

                    tableBody.appendChild(studentRow);
                });

                // Clear inputs after adding student
                document.getElementById('studentName').value = '';
                document.getElementById('rollNumber').value = '';

            } catch (error) {
                console.error("Error fetching assessment data:", error);
                alert("Error loading assessment data. Please try again.");
            }
        }

        // Function to remove a student row dynamically
        function removeStudent(rowId) {
            const row = document.getElementById(rowId);
            if (row) {
                row.remove();
            }
        }


        document.getElementById('assessmentForm').addEventListener('submit', event => {
            event.preventDefault();

            const finalData = {
                branch: document.getElementById('branch').value || '',
                subject: document.getElementById('subject').value || '',
                semester: document.getElementById('semester').value || '',
                courseCode: document.getElementById('courseCode').value || '',
                batch: document.getElementById('batch').value || '',
                numStudents: document.getElementById('numStudents').value || '',
                universityExam: document.getElementById('universityExam').value || '',
                assessmentYear: document.getElementById('assessmentYear').value || '',
                facultyName: document.getElementById('facultyName').value || '',
                students: {}
            };

            const studentRows = document.querySelectorAll('#assessmentToolsSection tr');

            studentRows.forEach(row => {
                const rowId = row.id;
                if (!rowId.includes('-')) {
                    console.warn(`Skipping row with invalid ID: ${rowId}`);
                    return;
                }

                const [studentRowPrefix, toolName] = rowId.split('-');

                const studentId = studentRowPrefix.split('studentRow')[1];
                console.log('PRE:', studentId);

                const studentName = row.querySelector('td:nth-child(1) input').value;
                const rollNumber = row.querySelector('td:nth-child(2) input').value;

                if (!finalData.students[studentId]) {
                    finalData.students[studentId] = {
                        name: studentName,
                        roll: rollNumber,
                        tools: {}
                    };
                }

                if (!finalData.students[studentId].tools[toolName]) {
                    finalData.students[studentId].tools[toolName] = { questions: [] };
                }

                const tool = data.tools.find(t => t.name === toolName);
                console.log('Tool:', tool);
                tool.questions.forEach((question, index) => {
                    const marksInput = row.querySelector(`td:nth-child(${index + 3}) input`);
                    const marksObtained = marksInput ? marksInput.value : '0';

                    finalData.students[studentId].tools[toolName].questions.push({
                        questionId: question.id,
                        co: question.co,
                        blooms: question.blooms,
                        maxMarks: question.maxMarks,
                        marksObtained
                    });
                });
            });

            console.log('Final Data:', finalData);
            fetch('/step2', {
                method: 'POST',
                body: JSON.stringify(finalData),
                headers: { 'Content-Type': 'application/json' }
            })
                .then(response => response.json())
                .then(data => alert('Data submitted successfully!'))
                .catch(error => console.error('Error:', error));
        });

        generateAssessmentTools();
    </script>


</body>

</html>